# API Endpoints Documentation

## Authentication Endpoints (Better Auth API)
Base URL: https://api.swingboudoirmag.com/api/v1/auth

### User Registration
- **POST** `/sign-up/email`
  - Body: `{ email, password, username, callbackURL }`
  - Response: `{ user, token }`

### User Login
- **POST** `/sign-in/email`
  - Body: `{ email, password, callbackURL }`
  - Response: `{ user, token }`

### Session Management
- **GET** `/session`
  - Headers: `Authorization: Bearer {token}`
  - Response: `{ user }`

## User Profile Endpoints
Base URL: https://api.swingboudoirmag.com/api/v1

### Get User Profile
- **GET** `/users/{userId}/profile`
  - Headers: `Authorization: Bearer {token}`
  - Response: `{ id, name, bio, modelId, profileImage, votingImage, hobbies, paidVoterMessage, freeVoterMessage, portfolioPhotos, createdAt, updatedAt }`

### Create User Profile
- **POST** `/profile`
  - Headers: `Authorization: Bearer {token}`
  - Body: `{ name, bio, hobbies, paidVoterMessage, freeVoterMessage, profileImage, votingImage }`
  - Response: `{ id, ...profileData }`

### Update User Profile
- **PUT** `/profile`
  - Headers: `Authorization: Bearer {token}`
  - Body: `{ name, bio, hobbies, paidVoterMessage, freeVoterMessage, profileImage, votingImage }`
  - Response: `{ id, ...updatedProfileData }`

### Get User Stats
- **GET** `/users/{userId}/stats`
  - Headers: `Authorization: Bearer {token}`
  - Response: `{ totalVotes, ranking, totalParticipants, votesNeededForFirst, totalCompetitions, activeCompetitions, completedCompetitions, totalEarnings }`

## Portfolio Management
### Upload Portfolio Photo
- **POST** `/profile/portfolio`
  - Headers: `Authorization: Bearer {token}`
  - Body: `FormData with file`
  - Response: `{ id, url, filename }`

## File Upload Endpoints
### Upload Image
- **POST** `/upload`
  - Headers: `Authorization: Bearer {token}`
  - Body: `FormData with file`
  - Response: `{ url, filename, size, type }`

## Competition Endpoints
### Get All Competitions
- **GET** `/contests`
  - Response: `{ competitions: [{ id, title, description, prize, startDate, endDate, status, participants }] }`

### Join Competition
- **POST** `/contests/join`
  - Headers: `Authorization: Bearer {token}`
  - Body: `{ contestId, userId }`
  - Response: `{ id, contestId, userId, registrationDate }`

### Get User Registrations
- **GET** `/contests/registrations/{userId}`
  - Headers: `Authorization: Bearer {token}`
  - Response: `{ registrations: [{ id, contestId, userId, votes, ranking, registrationDate }] }`

### Get Competition Participants
- **GET** `/contests/{contestId}/participants`
  - Response: `{ participants: [{ id, name, votes, ranking, profileImage }] }`

### Get Competition Rankings
- **GET** `/contests/{contestId}/rankings`
  - Response: `{ rankings: [{ rank, userId, name, votes, profileImage }] }`

## Notification Endpoints
### Get User Notifications
- **GET** `/notifications?userId={userId}`
  - Headers: `Authorization: Bearer {token}`
  - Response: `{ notifications: [{ id, type, title, message, createdAt, read, data }] }`

### Mark Notification as Read
- **PUT** `/notifications/{notificationId}/read`
  - Headers: `Authorization: Bearer {token}`
  - Body: `{ userId }`
  - Response: `{ success: true }`

### Mark All Notifications as Read
- **PUT** `/notifications/mark-all-read`
  - Headers: `Authorization: Bearer {token}`
  - Body: `{ userId }`
  - Response: `{ success: true }`

### Create Notification
- **POST** `/notifications`
  - Headers: `Authorization: Bearer {token}`
  - Body: `{ userId, type, title, message, data }`
  - Response: `{ id, ...notificationData }`

## Vote Endpoints
### Get User Votes
- **GET** `/votes/user/{userId}`
  - Headers: `Authorization: Bearer {token}`
  - Response: `{ votes: [{ id, contestId, voterId, modelId, type, amount, createdAt }] }`

### Get Competition Votes
- **GET** `/votes/contest/{contestId}`
  - Response: `{ votes: [{ id, voterId, modelId, type, amount, createdAt }] }`

### Cast Vote
- **POST** `/votes`
  - Headers: `Authorization: Bearer {token}`
  - Body: `{ contestId, modelId, type, amount }`
  - Response: `{ id, ...voteData }`

## Settings Endpoints
### Get User Settings
- **GET** `/users/{userId}/settings`
  - Headers: `Authorization: Bearer {token}`
  - Response: `{ notifications, privacy, preferences }`

### Update User Settings
- **PUT** `/users/{userId}/settings`
  - Headers: `Authorization: Bearer {token}`
  - Body: `{ notifications, privacy, preferences }`
  - Response: `{ success: true }`

## Dashboard Endpoints
### Get Dashboard Overview
- **GET** `/dashboard/{userId}/overview`
  - Headers: `Authorization: Bearer {token}`
  - Response: `{ stats, recentActivity, upcomingEvents }`

## Error Responses
All endpoints may return the following error responses:

### 400 Bad Request
```json
{
  "error": "Validation failed",
  "message": "Invalid input data",
  "details": [...]
}
```

### 401 Unauthorized
```json
{
  "error": "Unauthorized",
  "message": "Invalid or missing authentication token"
}
```

### 403 Forbidden
```json
{
  "error": "Forbidden",
  "message": "Insufficient permissions"
}
```

### 404 Not Found
```json
{
  "error": "Not found",
  "message": "Resource not found"
}
```

### 500 Internal Server Error
```json
{
  "error": "Internal server error",
  "message": "Something went wrong"
}
```

## Authentication Headers
All protected endpoints require the following header:
```
Authorization: Bearer {token}
```

## File Upload Requirements
- Maximum file size: 5MB
- Supported formats: JPEG, PNG, GIF, WebP
- All uploads require authentication token

## Rate Limiting
- 100 requests per minute per user
- 1000 requests per hour per user

## CORS Configuration
The API supports the following origins:
- http://localhost:8080 (Development)
- https://app.swingboudoirmag.com (Production)

## WebSocket Events (Real-time Updates)
For real-time updates, the following events are available:

### Vote Events
- `vote:cast` - New vote cast
- `vote:update` - Vote updated

### Competition Events
- `competition:start` - Competition started
- `competition:end` - Competition ended
- `competition:update` - Competition updated

### Notification Events
- `notification:new` - New notification created
- `notification:read` - Notification marked as read

## Usage Examples

### Creating a User Profile
```javascript
const response = await fetch('https://api.swingboudoirmag.com/api/v1/profile', {
  method: 'POST',
  headers: {
    'Authorization': `Bearer ${token}`,
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    name: 'John Doe',
    bio: 'Professional model and fitness enthusiast',
    hobbies: 'Photography, fitness, travel',
    paidVoterMessage: 'Thank you for your support!',
    freeVoterMessage: 'Thanks for voting!'
  })
});
```

### Uploading a Profile Image
```javascript
const formData = new FormData();
formData.append('file', imageFile);

const response = await fetch('https://api.swingboudoirmag.com/api/v1/upload', {
  method: 'POST',
  headers: {
    'Authorization': `Bearer ${token}`
  },
  body: formData
});
```

### Joining a Competition
```javascript
const response = await fetch('https://api.swingboudoirmag.com/api/v1/contests/join', {
  method: 'POST',
  headers: {
    'Authorization': `Bearer ${token}`,
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    contestId: 'contest_123',
    userId: 'user_456'
  })
});
```

This documentation covers all the API endpoints used in the onboarding system and dashboard components. All endpoints are production-ready and handle proper error responses, authentication, and data validation. 